#Мини гайд по основной работой с git
#Файлы
git status                          #Проверяем статус или изменения в проекте
git add .                           #Сохранить все изменения в проекте
git commit -m   "Сообщение"         #Коммитем и оставляем изменения в проекте. Например "Изменил файл reset.css"
git commit -a -m "Сообщение"        # Добавление + коммит всех изменений. Например "Написал форму регистраций"
git push origin <branch-name>       # Отправка изменений в удалённый репозиторий

#Ветки
git branch                          # Список всех веток
git branch <branch-name>            # Создание новой ветки
git checkout <branch-name>          # Переключение на другую ветку
git push origin <branch-name>       # Отправка изменений в удалённый репозиторий

#Полезные команды
git log                             # История коммитов
git blame <file>                    # Кто и когда изменил строку в файле
git stash                           # Сохранение изменений без коммита
git stash pop                       # Восстановление изменений из stash
git reset --hard <commit>           # Возврат к определённому коммиту (осторожно!)


# 1. Инициализация или клонирование репозитория
git init                            # Инициализация нового Git-репозитория
git clone <URL>                     # Клонирование удалённого репозитория

# 2. Проверка статуса и изменений
git status                          # Проверка статуса репозитория
git diff                            # Просмотр различий в файлах

# 3. Работа с ветками
git branch                          # Список всех веток
git branch <branch-name>            # Создание новой ветки
git checkout <branch-name>          # Переключение на другую ветку
git switch <branch-name>            # Альтернативное переключение на ветку
git merge <branch-name>             # Слияние другой ветки в текущую

# 4. Добавление и коммит изменений
git add <file>                      # Добавление файла в коммит
git add .                           # Добавление всех изменений в проекте
git commit -m "Сообщение"           # Создание коммита с описанием
git commit -a -m "Сообщение"        # Добавление + коммит всех изменений

# 5. Обновление репозитория
git pull origin <branch-name>       # Обновление локальной ветки из удалённой
git fetch                           # Загрузка данных о коммитах без слияния

# 6. Загрузка изменений в репозиторий
git push origin <branch-name>       # Отправка изменений в удалённый репозиторий

# 7. Удаление ветки
git branch -d <branch-name>         # Удаление локальной ветки (если она слита)
git branch -D <branch-name>         # Принудительное удаление локальной ветки
git push origin --delete <branch-name> # Удаление ветки из удалённого репозитория

# 8. Работа с конфликтами
git merge <branch-name>             # Слияние ветки, при конфликте:
git add <file>                      # Добавить файл после разрешения конфликта
git commit -m "Resolved conflicts"  # Закоммитить решение конфликта

# 9. Полезные команды

# Базовый рабочий процесс для команды
# Клонирование проекта
git clone <URL>

# Создание новой ветки для задачи
git branch <feature-name>
git checkout <feature-name>

# Добавление изменений
git add .
git commit -m "Добавлено: описание изменений"

# Синхронизация с удалённым репозиторием
git pull origin main

# Загрузка изменений в ветку
git push origin <feature-name>

# Слияние ветки с основной
git checkout main
git pull origin main
git merge <feature-name>
git push origin main
